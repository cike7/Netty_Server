缺点：case语句多时此方案显得特别的臃肿，无论是阅读起来还是后期维护修改都很不方便，在此项目中用接口加list方式将其替换

      switch (dataPackage.requestType) {
            case RequestType.account_login:
                System.out.println("客户端请求登录");
                int userID = SqlSelectUser.getQueryUserID(dataPackage.userInfo);

                if (userID != 0) {//用户存在
                    dataPackage.userInfo.setUser_id(userID);
                    feedback.status = 1;
                    //完善用户信息
                    SqlSelectUser.getQueryUserInfo(dataPackage.userInfo);
                    //得到好友名单
                    feedback.friendList = SqlSelectUser.getQueryFriendsList(dataPackage.userInfo);

                    synchronized (Application.class) {
                        Application.getInstance.clients.put(ctx.channel(), userID);
                    }

                } else {//用户不存在
                    feedback.status = 0;
                }

                String feedbackLoginData = ServerFeedbackClientInfo.GetInstance().setDataInfo(dataPackage.userInfo, feedback, RequestType.account_login);
                System.out.println("反馈信息：" + feedbackLoginData);
                ctx.channel().writeAndFlush(feedbackLoginData);
                break;

            case RequestType.account_register:
                System.out.println("客户端请求注册");

                int getUserID = SqlSelectUser.getQueryUserID(dataPackage.userInfo.getUser_account());

                if (getUserID != 0) {//用户存在不能进行注册
                    System.out.println("用户存在");
                    feedback.status = 0;

                } else {//用户不存在
                    System.out.println("用户不存在");
                    feedback.status = 1;
                    verifyCode = EmailUtils.sendEmail(dataPackage.userInfo.getUser_account());
                }

                String feedbackRegisterData = ServerFeedbackClientInfo.GetInstance().setDataInfo(new UserInfo(), feedback, RequestType.account_register);
                System.out.println("反馈信息：" + feedbackRegisterData);
                ctx.channel().writeAndFlush(feedbackRegisterData);

                break;


            case RequestType.email_verify:
                System.out.println("客户端邮箱验证提交" + new String(dataPackage.data));
                //判断验证码是否正确
                if (verifyCode.equals(Integer.valueOf(new String(dataPackage.data, "UTF-8")))) {
                    if (SqlSelectUser.getEnrollUser(dataPackage)) {
                        feedback.status = 1;
                    } else {
                        feedback.status = 0;
                    }

                    verifyCode = 0;
                } else {
                    feedback.status = 2;
                }

                String feedbackVerifyData = ServerFeedbackClientInfo.GetInstance().setDataInfo(new UserInfo(), feedback, RequestType.email_verify);
                System.out.println("反馈信息：" + feedbackVerifyData);
                ctx.channel().writeAndFlush(feedbackVerifyData);

                break;


            case RequestType.friend_search:
                System.out.println("查找好友id" + dataPackage.friendId);

                FriendInfo friendId = SqlSelectUser.getSearchFriendInfo(dataPackage.friendId);

                String feedbackSearchData = "";
                if (friendId.getFriend_id() != 0) {
                    feedback.status = 1;
                    feedbackSearchData = ServerFeedbackClientInfo.GetInstance().setSearchDataInfo(friendId, feedback, RequestType.friend_search);

                } else {
                    feedback.status = 0;
                    feedbackSearchData = ServerFeedbackClientInfo.GetInstance().setSearchDataInfo(new FriendInfo(), feedback, RequestType.friend_search);
                }

                System.out.println("反馈信息：" + feedbackSearchData);
                ctx.channel().writeAndFlush(feedbackSearchData);

                break;

            case RequestType.friend_add:
                System.out.println("添加好友:" + str);

                if (SqlSelectUser.getAddFriend(dataPackage.userInfo.getUser_id(), dataPackage.friendId, new String(dataPackage.data, "UTF-8"))) {
                    String addFriendData = ServerFeedbackClientInfo.GetInstance().setDataInfo(dataPackage.userInfo, dataPackage, RequestType.friend_add);

                    synchronized (Application.class) {
                        //好友如果在线直接发添加提醒
                        if (Application.getInstance.clients.containsValue(dataPackage.friendId)) {
                            //通过value得到key
                            getKey(Application.getInstance.clients, dataPackage.friendId).writeAndFlush(addFriendData);
                        }
                    }

                    System.out.println("反馈信息：" + addFriendData);

                } else {
                    System.out.println("用户请求添加好友失败");
                }

                break;


            case RequestType.friend_attest:
                System.out.println("用户提交认证" + str);

                if (SqlSelectUser.getFriendAuthentication(dataPackage.userInfo.getUser_id(), dataPackage.friendId, dataPackage.status)) {

                    feedback.friendList.clear();
                    feedback.friendList = SqlSelectUser.getQueryFriendsList(dataPackage.userInfo);
                    String hostAttestData = ServerFeedbackClientInfo.GetInstance().setDataInfo(dataPackage.userInfo, feedback, RequestType.friend_attest);
                    System.out.println("好友认证结果，返回好友列表信息：" + hostAttestData);
                    //反馈回自己
                    ctx.channel().writeAndFlush(hostAttestData);

                    //-------

                    synchronized (Application.class) {
                        //好友如果在线直接发添加提醒
                        if (Application.getInstance.clients.containsValue(dataPackage.friendId)) {
                            UserInfo friendInfo = new UserInfo();
                            friendInfo.setUser_id(dataPackage.friendId);
                            List<FriendInfo> friendsList = SqlSelectUser.getQueryFriendsList(friendInfo);
                            String friendAttestData = ServerFeedbackClientInfo.GetInstance().setDataInfo(friendInfo, friendsList, RequestType.friend_attest);
                            //反馈回好友
                            getKey(Application.clients, dataPackage.friendId).writeAndFlush(friendAttestData);
                        }
                    }

                }else {
                    //
                    System.out.println("数据库写入发生意外");
                }

                break;

            case RequestType.chat:

                synchronized (Application.class) {
                    if (Application.getInstance.clients.containsValue(dataPackage.friendId)) {//好友在线直接发送
                        //设置聊天数据
                        String chatData = ServerFeedbackClientInfo.GetInstance().setDataInfo(dataPackage);
                        //通过value得到key
                        getKey(Application.getInstance.clients, dataPackage.friendId).writeAndFlush(chatData);

                    } else {//好友离线存数据库
                        //给好友插入数据
                        SqlSelectUser.getWriteFriendChatMessage(dataPackage.friendId, dataPackage.userInfo.getUser_id(), new String(dataPackage.data, "Utf-8"));
                        System.out.println("好友id：" + dataPackage.friendId);

                    }
                }

                break;
            case RequestType.account_alter:
                System.out.println("客户端请求修改账户信息");

                break;
    }